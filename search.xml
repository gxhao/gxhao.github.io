<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows重装后全自动下载所需软件和配置开发环境</title>
    <url>//reimage/</url>
    <content><![CDATA[<h2 id="初始化一键安装必备软件">初始化一键安装必备软件</h2>
<p>右键点击开始菜单，powershell（管理员）运行下面脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://github.com/gxhao2020/configuration-script-win/blob/main/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>
<h2 id="安装winget">安装winget</h2>
<blockquote>
<p>winget 是微软推出的命令行工具，可以输入简单的命令安装常用软件,<a href="https://www.cnblogs.com/gxhao/p/15871239.html">参考这里</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Install Winget</span><br><span class="line">if (-not $(Get-Command winget -ErrorAction SilentlyContinue)) &#123;</span><br><span class="line">    Write-Host &quot;Installing WinGet...&quot; -ForegroundColor Green</span><br><span class="line">    Start-Process &quot;ms-appinstaller:?source=https://aka.ms/getwinget&quot;</span><br><span class="line">    while(-not $(Get-Command winget -ErrorAction SilentlyContinue))</span><br><span class="line">    &#123;</span><br><span class="line">        Write-Host &quot;Winget is still not found!&quot; -ForegroundColor Yellow</span><br><span class="line">        Start-Sleep -Seconds 5</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="软件链接">软件链接</h2>
<p><a href="https://dl.xdown.org/windows/i386/xdown-2.0.4.5.zip">xdown</a><br>
<a href="https://www.mgnb.jp/download/MGNB.exe">mgnb</a><br>
<a href="https://github.com/AutoDarkMode/Windows-Auto-Night-Mode/releases/download/10.1.0.10/AutoDarkModeX_10.1.0.10.exe">Auto Dark Model</a><br>
<a href="https://download.ydstatic.com/notewebsite/downloads/YNote.exe">有道云笔记</a><br>
<a href="https://download.zerotier.com/dist/ZeroTierOne.msi">ZeroTier</a><br>
<a href="https://res.u-tools.cn/version2/uTools-2.4.3.exe">Utools</a></p>
<p>通过powershell默认安装exe软件。</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/47110728/powershell-download-and-run-exe-file">https://stackoverflow.com/questions/47110728/powershell-download-and-run-exe-file</a></p>
</blockquote>
<blockquote>
<p><a href="https://stackoverflow.com/questions/45756791/install-software-using-powershell-script?rq=1">https://stackoverflow.com/questions/45756791/install-software-using-powershell-script?rq=1</a></p>
</blockquote>
<h1>设置篇</h1>
<h2 id="设置Windows投影默认为第二屏幕">设置Windows投影默认为第二屏幕</h2>
<blockquote>
<p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E5%85%B3%E4%BA%8Ewin10%E7%9A%84%E6%8A%95%E5%BD%B1/e80b6da9-31c8-4b1a-a3df-4d91b3c6f974?auth=1">https://answers.microsoft.com/zh-hans/windows/forum/all/关于win10的投影/e80b6da9-31c8-4b1a-a3df-4d91b3c6f974?auth=1</a></p>
</blockquote>
<ol>
<li>
<p>点击开始按钮&gt;输入cmd&gt;右键点击搜索结果中的&quot;命令提示符&quot;&gt;以管理员身份运行</p>
</li>
<li>
<p>在打开的命令提示符窗口中运行:</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">notepad C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SecondOnly.bat</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>确认新建文件,粘贴下面内容到记事本中:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">DisplaySwitch.exe /external</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>
<p>保存并关闭记事本程序</p>
</li>
<li>
<p>重启电脑看一下是否成功了呢</p>
</li>
</ol>
<h2 id="完全删除小组件">完全删除小组件</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">winget uninstall MicrosoftWindows.Client.WebExperience_cw5n1h2txyewy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">winget install 9MSSGKG348SP</span><br></pre></td></tr></table></figure>
<h2 id="配置ssh私钥">配置ssh私钥</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#x27;gxhao&#x27;  </span><br><span class="line">git config --global user.email &#x27;1625546088@qq.com&#x27;</span><br><span class="line"># 生成密钥（注意设置git账号密码</span><br><span class="line">ssh-keygen -t rsa -C &#x27;1625546088@qq.com&#x27;</span><br><span class="line"># 检测是否配置成功</span><br><span class="line"> ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="配置idea插件地址">配置idea插件地址</h2>
<blockquote>
<p><a href="https://plugins.zhile.io">https://plugins.zhile.io</a></p>
</blockquote>
<p>jrebel 激活</p>
<blockquote>
<p><a href="http://jrebel.whrj999.com/3d64b43e-0da7-40a3-925a-844e5a57aea8">http://jrebel.whrj999.com/3d64b43e-0da7-40a3-925a-844e5a57aea8</a></p>
</blockquote>
<h2 id="设置git代理">设置git代理</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://gist.githubusercontent.com/162554/b14669da81dd9574cc7ae34955be7fbe/raw/86a5b82f47a8f5e9c822a749782dc08e6d59b230/SetProxy.psm1&#x27;))</span><br><span class="line">$ git config --global git.proxy http://127.0.0.1:1080</span><br><span class="line">$ git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">$ git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">http.https://github.com.proxy=socks5://127.0.0.1:10808</span><br></pre></td></tr></table></figure>
<h2 id="激活Windows">激活Windows</h2>
<blockquote>
<p><a href="https://msguides.com/windows-11">https://msguides.com/windows-11</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line"># 获取激活服务器地址   https://kms.msguides.com/</span><br><span class="line">slmgr /skms s8.uk.to</span><br><span class="line">slmgr /ato</span><br><span class="line"></span><br><span class="line"># office </span><br><span class="line">https://www.grameen-info.org/free-microsoft-office-2016-product-key/</span><br></pre></td></tr></table></figure>
<h1>FAQ</h1>
<h2 id="锁屏桌面壁纸不更新">锁屏桌面壁纸不更新</h2>
<p>我刚刚解决了这个问题。先将&quot;<strong>Windows 聚焦</strong>&quot; 改为 “<strong>图片</strong>”,再删除<code>C:\Users\gxhao\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\Settings</code><br>
目录下<code>settings.dat</code>和<code>roaming.lock</code>这两个文件。（注意是隐藏的文件）再 由 “图片” 改回 “Windows 聚焦”。稍等，OK!</p>
<p>之后就可以看到:<br>
<code>...\Microsoft.Windows.ContentDeliveryManager_***\LocalState\Assets</code><br>
文件夹里下载了一批聚焦图片<br>
<code>..\Microsoft.Windows.ContentDeliveryManager_***\settings</code><br>
目录下重新生成了settings.dat文件。</p>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>reimage</tag>
      </tags>
  </entry>
  <entry>
    <title>利用batch脚本自动更新部署构建系统</title>
    <url>/buildbyjenkins/</url>
    <content><![CDATA[<p>在我们项目开发过程中，由于生产开发svn地址和系统部署svn地址不一致，所以在我们开发完功能后，需要手动使用maven构建工具打包，然后登录到远程服务器，再将修改的包放到远程仓库的svn目录下，再提交，然后在运维平台构建，等待构建完成后再切换版本更新。</p>
<p>这一顿操作下来是不是听起来就感觉很麻烦了，但是如果是测试系统，这样的操作每天还要重复十多次。那这样的话我们的工作大部分时间都在重复性部署，<strong>那这些重复性的工作</strong>我们能不能交给计算机来做呢？</p>
<h2 id="抽象">抽象</h2>
<p>首先我们将这一过程抽象出来，大概是这样的：</p>
<p><img data-src="/blog-imgs/image/batpipline1.png" alt=""></p>
<h2 id="设计">设计</h2>
<h3 id="初始优化">初始优化</h3>
<p>刚开始我想的是把远程服务器的svn仓库拉到本地，然后本地构建完直接将文件移动到远程服务器远程svn仓库所在的文件夹。再点击提交，然后构建切换更新，这样就省去了登录服务器和复制文件这两个最耗时的操作（Windows服务器一般支持两个用户，所以会有登录到服务被人挤掉的情况，而且文件复制也很慢）。</p>
<p><img data-src="/blog-imgs/image/svnpipline2.png" alt=""></p>
<p>代码实现就是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> Path=%PATH%</span><br><span class="line"><span class="built_in">set</span> filePath=D:\work\xxxx\WEB-INF\lib</span><br><span class="line">@<span class="built_in">echo</span> start build</span><br><span class="line">call mvn clean install -f pom.xml</span><br><span class="line">@<span class="built_in">echo</span> copy file</span><br><span class="line">:: copy file</span><br><span class="line">@<span class="built_in">echo</span> copy jar file to eCloud directory</span><br><span class="line">copy .\target\xxx.jar  %filePath%\xxx.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::提交到Jenkins</span><br><span class="line"><span class="built_in">cd</span> %filePath%</span><br><span class="line">@<span class="built_in">echo</span> svn commit</span><br><span class="line">svn commit -m <span class="string">&quot;测试系统更新&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="进一步优化">进一步优化</h3>
<p>省去登陆服务器的操作后，可以说为我们更新系统已经节省了很多部署构建时间。但是这样还有一个问题，那就是如果我项目中另一个开发人员加入这个项目，那么他还需要去把远程服务器的svn仓库拉下来，并且修改这个脚本。</p>
<p>虽然我们的工作量大大降低了，但是这个操作很明显增加了别人的工作量，所以还需要进一步对这个脚本进行优化。</p>
<p>我们应该提交到远程服务器文件夹，并且登陆到远程服务器执行提交命令，提交完返回后<strong>自动触发运维平台</strong>构建。</p>
<ol>
<li>关于自动触发运维平台。因为运维平台内部使用的是jenkins 构建部署工具。所以我们首先需要将jenkins应用所在服务器代理到nginx服务器，修改<code>nginx.conf</code>文件</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        proxy_connect_timeout 600s;</span><br><span class="line">        proxy_read_timeout 600s;</span><br><span class="line">        proxy_send_timeout 600s;</span><br><span class="line">        proxy_pass http://xxx:9000;</span><br><span class="line">        #root   html;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>配置Jenkins用户token。</p>
<p><img data-src="/blog-imgs/image/svnpipline3.png" alt=""></p>
</li>
<li>
<p>配置Jenkins触发事件</p>
<p><img data-src="/blog-imgs/image/svnpipline4.png" alt=""></p>
</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set Path=%PATH%</span><br><span class="line">::set filePath</span><br><span class="line">set remotePath = /home/xxx</span><br><span class="line">set jenkinsurl=xxx</span><br><span class="line">set arg=%@urlencode[%jenkinsurl%]</span><br><span class="line">@echo start build</span><br><span class="line">call mvn clean install -f pom.xml</span><br><span class="line">@echo copy file</span><br><span class="line">:: copy file and run scriprt</span><br><span class="line">@echo copy jar file to remote directory</span><br><span class="line">scp .\target\xxxx.jar username@remoteip:/home/remotepath</span><br><span class="line">::commit svn </span><br><span class="line">ssh -t username@remoteip  &quot;  cd xxx/lib; svn commit -m &#x27;CS update&#x27;; svn status; ls -l | grep  &quot;</span><br><span class="line">:: remote build</span><br><span class="line">@echo post jenkins</span><br><span class="line">curl -I -u username:password %tpframeurl%</span><br><span class="line"></span><br><span class="line">@echo success job</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意，该脚本需要事先将本地的rsa公钥放到authorized_keys文件中，保证ssh免密登陆服务器。</p>
<p>最终我们实现了这样的流程;</p>
<p><img data-src="/blog-imgs/image/svnpipline5.png" alt=""></p>
<p>利用自动化脚本大大节约了我们的部署运维时间，可以更集中的专注于业务开发，提高我们的开发效率。</p>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>jenkins</tag>
        <tag>batch</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建属于自己的博客</title>
    <url>/creatmyselfblog/</url>
    <content><![CDATA[<h2 id="事件起因">事件起因</h2>
<p>在2022年初的时候，因为一直使用的有道云笔记出现同步错误问题（一台电脑上写的在另一个电脑始终无法同步过来），同时也想把自己的想法和平常遇到问题的解决方式分享给其他人，希望能够对别人有所帮助，于是有了创建自己博客的想法。</p>
<h2 id="在cnblogs上创建博客">在cnblogs上创建博客</h2>
<p>出于成本的考虑，自建博客需要在云服务上购买一系列的基础设施，还有要考虑日常运维等问题。博客嘛，肯定是内容为主，所以在目前国内非常成熟的博客园搭建了一套<a href="https://www.cnblogs.com/gxhao">自己的博客</a>。稍微换了点主题，大概是长这样的：</p>
<p><img data-src="/blog-imgs/image/selfblog1.png" alt=""></p>
<p>看上去也很简单美观，而且编写也很方便，但是使用过程中也有一些小问题。</p>
<h3 id="markdown图片保存">markdown图片保存</h3>
<p>在博客园写博客有个很难受的一点是，我刚开始使用有道云笔记作为博客的草稿。所以出现了一个问题，博客的草稿的图片非常难插入，本地markdown图片还好，上传到网页端因为链接消失的问题，图片需要能够在网页上访问。为此我尝试了各种办法：</p>
<ol>
<li>
<p>刚开始的时候使用的是利用有道云笔记的图片分享功能，大概是这样的<a href="https://zhuanlan.zhihu.com/p/149200483">有道云笔记markdown插入图片方法 - 知乎 (zhihu.com)</a>。这样就导致我每次想往博客里面插入图片就很麻烦，而且还是重复性操作。</p>
</li>
<li>
<p>后来又考虑使用<a href="https://drive.aiursoft.com/?show=direct">Home - AiurDrive (aiursoft.com)</a>。这样也只需要上传图片到网站，然后引用即可。但是这种方式也存在因为某些原因网站偶尔无法访问导致链接失效和改变文件夹名称导致链接失效的问题，再去调整就很麻烦了。</p>
</li>
</ol>
<h3 id="资料展示灵活">资料展示灵活</h3>
<p>有的时候想在博客上加一个别的栏目，或者别的功能，因为寄托于博客园本身的架构，像拓展的话很困难。</p>
<h3 id="独立域名">独立域名</h3>
<p>虽然说访问博客园官网再加上自己主页的后缀访问起来也很方便，但是总是感觉隔一层怪怪的感觉。还是使用自己的域名访问更清真一些。</p>
<h2 id="自建博客">自建博客</h2>
<h3 id="通过Github-Pages创建博客。">通过Github Pages创建博客。</h3>
<ol>
<li>首先我们需要在GitHub上创建username.github.io的仓库</li>
<li>将<a href="https://hexo.io/zh-cn/docs/github-pages">Hexo</a>部署上去。</li>
<li>访问 <a href="http://username.github.io">username.github.io</a></li>
</ol>
<h3 id="申请域名">申请域名</h3>
<ol>
<li>我们可以通过世界最大的域名售卖网站<a href="https://hk.godaddy.com/">GoDaddy</a>购买，注意不要选择额外的服务。我是通过银联购买的（不得不说，银联的支付才是悄无声息！）</li>
<li>购买完成后，我们可以通过<a href="https://dash.cloudflare.com/">cloudflare</a>配置域名防护、CDN、域名服务器等。</li>
<li>在cloudflare的DNS配置中配置域名解析，配置一个A记录到GitHub网址，例如<code>185.199.109.153</code>，配置另一个CNAME记录到你自己的博客地址,例如 <a href="http://username.github.io">username.github.io</a>。</li>
</ol>
<h3 id="部署在其他网站">部署在其他网站</h3>
<p>也可以将博客部署在其他网站，这里主要推荐三个比较好用的网站。</p>
<ol>
<li><a href="https://id.heroku.com/login">heroku</a><br>
主要适用于部署后端服务，java等，有一个问题是付款支持的账户较少。<br>
<img data-src="/blog-imgs/image/myselfblog2.png" alt=""></li>
<li><a href="https://vercel.com/dashboard">vercel</a><br>
主要用来部署前端服务，部署起来非常的方便快捷，而且提供完善的pipline，预发环境，自定义域名等服务，用来部署博客非常合适<br>
<img data-src="/blog-imgs/image/myselfblog1.png" alt=""></li>
<li><a href="https://codelabs.developers.google.com/codelabs/cloud-app-engine-springboot/index.html?index=..%2F..index#8">Google Cloud Platform</a><br>
提供完善的稳定和命令函支持也非常方便</li>
</ol>
<h2 id="链接">链接</h2>
<p><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">Hexo部署</a><br>
<a href="https://segmentfault.com/a/1190000021923137">基于Hexo的matery主题搭建博客并深度优化</a></p>
]]></content>
      <categories>
        <category>website-primer</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>ssl</tag>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 部署clash的三种方式</title>
    <url>//clashlinux/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>Clash for Windows 是一款非常好用的代理软件，它通过简单的配置能实现通过代理的网路自动切换直连或者代理。也提供了允许局域网其他设备连接和游戏模式等非常好i用的功能。在Windows的图形化界面操作非常友好。由于我家里有台设备是Linux Ubuntu。想通过这个软件走代理。以下是配置三种方法</p>
<h2 id="linux常规安装">linux常规安装</h2>
<h3 id="1-下载文件">1. 下载文件</h3>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget  https://github.com/Dreamacro/clash/releases/download/v1.8.0/clash-freebsd-amd64-v1.8.0.gz</span><br></pre></td></tr></table></figure>
<h3 id="2-解压">2. 解压</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gunzip</span><br></pre></td></tr></table></figure>
<h3 id="3-配置">3. 配置</h3>
<p>将订阅的配置文件移动到解压目录并重命名为<code>config.yaml</code></p>
<h3 id="4、启动">4、启动</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x ./clash-linux-XXXX</span><br><span class="line">./clash-linux-XXXX -d .</span><br></pre></td></tr></table></figure>
<h3 id="5、自启动">5、自启动</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建service文件</span><br><span class="line">touch /etc/systemd/system/clash.service</span><br><span class="line"></span><br><span class="line">#编辑如下文本： </span><br><span class="line">[Unit] </span><br><span class="line">Description=clash daemon  </span><br><span class="line">[Service] </span><br><span class="line">Type=simple </span><br><span class="line">User=root </span><br><span class="line">ExecStart=/home/username/下载/Clash/clash -d /home/username/下载/Clash/ </span><br><span class="line">Restart=on-failure  </span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">## 刷新系统服务并设置为自启动</span><br><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl enable clash </span><br><span class="line">sudo systemctl start clash </span><br></pre></td></tr></table></figure>
<hr>
<h2 id="docker部署">docker部署</h2>
<p>需要先在本地创建config.yaml文件</p>
<h3 id="1-编辑docker-compose配置文件">1. 编辑docker-compose配置文件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  clash:</span><br><span class="line">    # ghcr.io/dreamacro/clash</span><br><span class="line">    # ghcr.io/dreamacro/clash-premium</span><br><span class="line">    # dreamacro/clash</span><br><span class="line">    # dreamacro/clash-premium</span><br><span class="line">    image: dreamacro/clash</span><br><span class="line">    container_name: clash</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config.yaml:/root/.config/clash/config.yaml</span><br><span class="line">      # - ./ui:/ui # dashboard volume</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;7890:7890&quot;</span><br><span class="line">      - &quot;7891:7891&quot;</span><br><span class="line">      # - &quot;8080:8080&quot; # external controller (Restful API)</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    network_mode: &quot;bridge&quot; # or &quot;host&quot; on Linux</span><br></pre></td></tr></table></figure>
<h3 id="2-启动">2. 启动</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="3-访问">3. 访问</h3>
<p><a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a></p>
<h2 id="通过flatpak安装clash-for-windows">通过<a href="https://flatpak.org/setup/Ubuntu">flatpak</a>安装clash for windows</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flatpak install clash </span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<blockquote>
<p><a href="https://www.cnblogs.com/rogunt/p/15127947.html">https://www.cnblogs.com/rogunt/p/15127947.html</a> #普通方式部署clash</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/Dreamacro/clash/wiki/clash-as-a-daemon#docker">https://github.com/Dreamacro/clash/wiki/clash-as-a-daemon#docker</a> #docekr 部署clash</p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>linux</tag>
        <tag>clash</tag>
      </tags>
  </entry>
  <entry>
    <title>日常常用小技巧</title>
    <url>//deploy-use/</url>
    <content><![CDATA[<h2 id="去除网易有道笔记左下角广告">去除网易有道笔记左下角广告</h2>
<p>在安装目录，找到 <strong>\YoudaoNote\theme\default\skin.xml</strong> 删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;PanelAd Bounds=&quot;0,0,0,161&quot; DockStyle=&quot;bottom&quot;&gt; &lt;/PanelAd&gt;</span><br></pre></td></tr></table></figure>
<h2 id="判断一台机器是不是虚拟机">判断一台机器是不是虚拟机</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemd-detect-virt</span><br></pre></td></tr></table></figure>
<h2 id="windows-入站规则开启不生效">windows 入站规则开启不生效</h2>
<p>检查专用与公用网络配置。这俩并不公用一个网络配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置某网络为专用链接</span><br><span class="line">Get-NetConnectionProfile</span><br><span class="line"></span><br><span class="line">Set-NetConnectionProfile  -InterfaceIndex 18 -NetworkCategory Private</span><br></pre></td></tr></table></figure>
<h2 id="docker-容器内tomcat应用与当前时间相差8个小时">docker 容器内tomcat应用与当前时间相差8个小时</h2>
<p>在<code>catalina.sh</code>配置文件中加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_OPTS=&quot;$JAVA_OPTS -Duser.timezone=Asia/shanghai&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="node降版本">node降版本</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Determining your Node version</span><br><span class="line"></span><br><span class="line">node -v  // or node --version</span><br><span class="line">npm -v   // npm version or long npm --version</span><br><span class="line"># Ensure that you have n installed</span><br><span class="line"></span><br><span class="line">sudo npm install -g n // -g for global installation </span><br><span class="line"># Upgrading to the latest stable version</span><br><span class="line"></span><br><span class="line">sudo n stable</span><br><span class="line"># Changing to a specific version</span><br><span class="line"></span><br><span class="line">sudo n 16.13.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>deploy</tag>
        <tag>CI/CD</tag>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>如何减少代码中的if else,设计模式实战</title>
    <url>//design/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>设计模式可能我们都听过，但是在实际开发过程中可能种种原因（时间紧，没有合适场景）很少使用。上周对接流程接口时，接口调用方的回调接口很有意思，也正好使用设计模式的设计理念来对整个内容设计开发下。</p>
<p>需求内容大概是这样的，我们系统有很多审批流程推送到客户系统，但是客户只要求我们提供唯一的回调接口。接口返回内容也只有请求id和审批通过/审批不通过。</p>
<h2 id="设计">设计</h2>
<p>通常情况下，这个需求实现起来很容易，大概是这样的：</p>
<ol>
<li>先判断流程是审批通过/审批退回</li>
<li>根据请求id查找出对应的流程</li>
<li>对应流程执行相应的操作。</li>
</ol>
<h2 id="编码">编码</h2>
<h3 id="快速编码">快速编码</h3>
<p>我们很容易根据设计写出以下的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;callbackoa&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">callBackOa</span><span class="params">(<span class="meta">@RequestBody</span> String param)</span></span>&#123;</span><br><span class="line">    JSONObject paramJson = JSONObject.parseObject(param);</span><br><span class="line">    String requestId = paramJson.getString(<span class="string">&quot;requestId&quot;</span>);</span><br><span class="line">    String approvalStatus = paramJson.getString(<span class="string">&quot;approvalStatus&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(approvalStatus))&#123;</span><br><span class="line">        <span class="comment">// search workflowId</span></span><br><span class="line">        String workflowId = getWorkflowId(requestId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;111&quot;</span>.equals(workflowId))&#123;</span><br><span class="line">            <span class="comment">//do Corresponding Process</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;222&quot;</span>.equals(workflowId))&#123;</span><br><span class="line">            <span class="comment">//do Corresponding Process</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;333&quot;</span>.equals(workflowId))&#123;</span><br><span class="line">            <span class="comment">//do Corresponding Process</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        String workflowId = getWorkflowId(requestId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;111&quot;</span>.equals(workflowId))&#123;</span><br><span class="line">            <span class="comment">//do Corresponding Process</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;222&quot;</span>.equals(workflowId))&#123;</span><br><span class="line">            <span class="comment">//do Corresponding Process</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;333&quot;</span>.equals(workflowId))&#123;</span><br><span class="line">            <span class="comment">//do Corresponding Process</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我们需求快速开发时期，这样写也没什么问题，也能很快的完成需求交付。但是很显然，这并不是一种<strong>好的编码形式</strong></p>
<p>他可能有以下问题</p>
<ol>
<li>不符合开闭原则，如果想要修改代码，就要重新修改这个类，不利于拓展</li>
<li>不符合面向对象编程，看上去更像是面向过程（调用函数来实现）</li>
<li>每次打开这个类一行行看下来，找对应的代码逻辑非常困难，代码耦合太多，不符合单一职责原则。</li>
</ol>
<h3 id="改造第一阶段">改造第一阶段</h3>
<p>既然上面的代码有这么多的问题，那我们开始优化一下。</p>
<ol>
<li>我们考虑到每次执行对应的流程都要先根据<code>resquestid</code>查询一下对应的<code>workflowid</code>，可以考虑将通用的方法抽象出来。</li>
<li>可以考虑将每一种流程都抽取到单独的一个类里面。</li>
<li>使用依赖注入来注入所有实现，统一使用抽象类来调用（抽象类本身不要添加@component注解）</li>
</ol>
<p>我们使用<strong>适配器模式</strong>对代码优化</p>
<blockquote>
<p>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不     兼容而不能一起工作的那些类能一起工作。<br>
适配器模式包含以下主要角色：<br>
- 目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。<br>
- 适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。<br>
- 适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</p>
</blockquote>
<p>下面是改造后的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 回调接口</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ReceiveOAProcessService oaProcessService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;callbackoa&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">callBackOa</span><span class="params">(<span class="meta">@RequestBody</span> String param)</span></span>&#123;</span><br><span class="line">    JSONObject paramJson = JSONObject.parseObject(param);</span><br><span class="line">    String requestId = paramJson.getString(<span class="string">&quot;requestId&quot;</span>);</span><br><span class="line">    String approvalStatus = paramJson.getString(<span class="string">&quot;approvalStatus&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(approvalStatus)) &#123;</span><br><span class="line">        oaProcessService.revokeSuccCallback(jsonObject.getString(<span class="string">&quot;requestId&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(approvalStatus)) &#123;</span><br><span class="line">        oaProcessService.revokeFailCallback(jsonObject.getString(<span class="string">&quot;requestId&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;流程传入标识为空！&quot;</span>).toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 抽象类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">abstractWorkflowService</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> WorkflowRequestInfo <span class="title">executeCallback</span><span class="params">(String requestId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// search workflowid</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">revokeSuccCallback</span><span class="params">(String requestId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">revokeFailCallback</span><span class="params">(String requestId)</span></span>;</span><br><span class="line"></span><br><span class="line">## 具体实现</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">workflowServiceImpl</span> <span class="keyword">extends</span> <span class="title">abstractWorkflowService</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revokeSuccCallback</span><span class="params">(String requestId)</span> </span>&#123;</span><br><span class="line">    WorkflowRequestInfo workflowRequestInfo = executeCallback(requestId);</span><br><span class="line">    <span class="keyword">if</span> (workflowId.equals(workflowRequestInfo.getWorkflowBaseInfo().getWorkflowId()))&#123;</span><br><span class="line">       <span class="comment">//do Corresponding Process</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="改造第二阶段">改造第二阶段</h3>
<p>看上去我们的代码已经优化的差不多了，如果要增加流程只需要增加类继承原有的抽象类即可，修改对应流程也只需要修改对应的类。但事实上我们只是将if判断语句换了地方，写到了具体的类里面。这显然不符合我们的预期。</p>
<p>我们使用<strong>策略模式</strong> 对代码进行优化</p>
<blockquote>
<p>策略模式定义了一系列的算法，并将每一个算法封装起来，使它们可以相互替换。策略模式通常包含以下角色：</p>
<ul>
<li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li>
<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
</blockquote>
<p>根据策略模式，我们抽象出一个接口，并提供对外的访问的通用环境类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OaProcessStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">revokeSuccCallback</span><span class="params">(String requestId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> # 实现</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">firstworkflowServiceImpl</span> <span class="keyword">extends</span> <span class="title">abstractWorkflowService</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revokeSuccCallback</span><span class="params">(String requestId)</span> </span>&#123;</span><br><span class="line">        WorkflowRequestInfo workflowRequestInfo = executeCallback(requestId);</span><br><span class="line">        <span class="comment">//do Corresponding Process</span></span><br><span class="line">        </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  # 对外的环境类</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">workflowStrategyContext</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveWorkflowInfo</span><span class="params">(String workflowid)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="string">&quot;111&quot;</span>.equals(workflowid))&#123;</span><br><span class="line">              <span class="keyword">new</span>  firstworkflowServiceImpl();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(<span class="string">&quot;222&quot;</span>.equals(workflowid))&#123;</span><br><span class="line">              <span class="keyword">new</span>  secorndworkflowServiceImpl();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getcallMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">          OaProcessStrategy oaprocessStrategy =  receiveWorkflowInfo(String workflowid);</span><br><span class="line">          oaprocessStrategy.revokeSuccCallback(String requestId);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h3 id="改造第三阶段">改造第三阶段</h3>
<p>由以上的改造我们发现对应的实现类中没有成员变量，也就是实现类是无状态的，多次调用不影响类的实例没有影响。并且每次增加流程还需要修改环境类，不符合开闭原则。</p>
<p>因此我们使用<strong>单例模式</strong>进行对应的修改</p>
<blockquote>
<p>单例模式[1-5]设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<ul>
<li>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 环境类修改</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OaProcessStrategyContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String,OaProcessStrategy&gt; oaProcessStrategyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String OAWebserviceUrl = <span class="string">&quot;https://testecology.mengtaigroup.com/services/WorkflowService?wsdl&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExtractDataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册策略转换类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workflowId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oaProcessStrategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerStrategy</span><span class="params">(String workflowId,OaProcessStrategy oaProcessStrategy)</span></span>&#123;</span><br><span class="line">        oaProcessStrategyMap.putIfAbsent(workflowId,oaProcessStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应的策略类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workflowId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OaProcessStrategy <span class="title">getStrategy</span><span class="params">(String workflowId)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> oaProcessStrategyMap.get(workflowId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 抽象类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveOAProcessService</span> <span class="keyword">implements</span> <span class="title">OaProcessStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String workflowId)</span></span>&#123;</span><br><span class="line">        OaProcessStrategyContext.registerStrategy(workflowId,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 实现类</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegationReceiveOAProcessServiceImpl</span> <span class="keyword">extends</span> <span class="title">ReceiveOAProcessService</span> <span class="keyword">implements</span> <span class="title">OaProcessStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DelegationReceiveOAProcessServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        register(workflowId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revokeSuccCallback</span><span class="params">(String requestId)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>由此，我们实现了每个流程都能自己注册到环境类中，并且增加新流程完全不用修改原来的代码。同时代码之间的耦合性也大大降低。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 21.10 安装后找不到无线wifi问题排查</title>
    <url>//ubuntu-wifi/</url>
    <content><![CDATA[<h2 id="起因">起因</h2>
<p>家用笔记本在更新win11 最新的更新后频繁出现系统黑屏进入休眠状态的问题，但是我系统设置<code>休眠状态</code>为永不休眠。一气之下选择更换系统为 <code>Ubuntu（21.10）</code>（听说gnome40挺好用的</p>
<p>装好后出现了找不到wifi模块的问题，因为笔记本没有网线接口，有线网络也没法使用了。经过网上的搜索排查，最终解决，以下记录一下解决的思路。</p>
<h2 id="解决">解决</h2>
<h3 id="确定网卡型号">确定网卡型号</h3>
<p>通过厂商的下载中心，<a href="https://www.asus.com/support/Download-Center/">华硕全球支持中心</a>查询到我这台电脑的网卡型号为<strong>MT7921</strong>。</p>
<p><img data-src="" alt="图片1"></p>
<h3 id="是否是驱动问题">是否是驱动问题</h3>
<p>查看相关问题说MT7921在Linux内核为5.12以下不会自动识别,但是Ubuntu21.10内核为lunux kernel 5.13.应该不是这个问题</p>
<h3 id="linux防火墙">linux防火墙</h3>
<p>看<a href="https://miloserdov.org/?p=6899">这个帖子</a>说即使<code>linux</code>内核高于5.12也会因为防火墙问题导致无法查找wifi模块，安装linux防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-firmware</span><br></pre></td></tr></table></figure>
<h3 id="关闭快速启动">关闭快速启动</h3>
<p>在<a href="https://bbs.archlinux.org/viewtopic.php?id=267229">archlinux</a> 的论坛上翻到一个安装了防火墙仍然不起作用的回答。</p>
<blockquote>
<p>There is a bug report with not much more information in the upstream repository:<br>
<a href="https://github.com/openwrt/mt76/issues/548">https://github.com/openwrt/mt76/issues/548</a><br>
If you dual-boot with windows, disable its fast-startup mode. <a href="https://wiki.archlinux.org/title/Dual_b">https://wiki.archlinux.org/title/Dual_b</a> … ibernation</p>
</blockquote>
<p>定位到github issue,通过完全关闭电脑，并且拔掉电源线再启动解决。幸运的是我也是通过这种方法解决的。</p>
<h2 id="参考">参考</h2>
<blockquote>
<p><a href="https://github.com/openwrt/mt76/issues/548">https://github.com/openwrt/mt76/issues/548</a></p>
</blockquote>
<blockquote>
<p><a href="https://bbs.archlinux.org/viewtopic.php?id=267229">https://bbs.archlinux.org/viewtopic.php?id=267229</a></p>
</blockquote>
<blockquote>
<p><a href="https://askubuntu.com/questions/1346617/ubuntu-20-04-does-not-have-mediatek-driver-mt7921-for-wifi-bluetooth">https://askubuntu.com/questions/1346617/ubuntu-20-04-does-not-have-mediatek-driver-mt7921-for-wifi-bluetooth</a></p>
</blockquote>
<blockquote>
<p><a href="https://miloserdov.org/?p=6899">https://miloserdov.org/?p=6899</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker开启代理</title>
    <url>//dockerproxy/</url>
    <content><![CDATA[<h1>前言</h1>
<p>在国内网路情况下docker 拉取DockerHub仓库的镜像是非常慢的，这时候我们经常使用镜像加速器来解决这一问题，但是镜像加速器并不是始终生效的，在一些情况下可能会失效。<br>
<a href="https://github.com/docker-practice/docker-registry-cn-mirror-test/actions">docker rigster test</a>每天提供了镜像的测试功能。如果你经常使用代理的话，这边可以配置Docker代理。</p>
<h1>安装</h1>
<blockquote>
<p>The Docker daemon uses the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environmental  variables in its start-up environment to configure HTTP or HTTPS proxy behavior. You  cannot configure these environment variables using the daemon.json file.</p>
</blockquote>
<h2 id="1-创建docker-service-d文件夹">1. 创建<code>docker.service.d</code>文件夹</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>
<h2 id="2-创建http-proxy-conf文件">2. 创建<code>http-proxy.conf</code>文件</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch http-proxy.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-编写文件内容">3. 编写文件内容</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTPS_PROXY=127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure>
<h2 id="4-重启docker">4.重启docker</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="5-验证">5. 验证</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure>
<h1>FAQ</h1>
<h2 id="拉取镜像报错">拉取镜像报错</h2>
<blockquote>
<p>Using default tag: latest<br>
Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>”: proxyconnect tcp: EOF</p>
</blockquote>
<ul>
<li>重置dns解析服务器<br>
<a href="https://www.cxyzjd.com/article/a460467324/117607753">https://www.cxyzjd.com/article/a460467324/117607753</a></li>
<li>检查<code>/etc/systemd/system/docker.service.dhttp-proxy.conf</code> 配置文件</li>
</ul>
<h1>参考</h1>
<blockquote>
<p><a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy">https://docs.docker.com/config/daemon/systemd/#httphttps-proxy</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>shell proxy via proxychains-ng</title>
    <url>//shell-proxy/</url>
    <content><![CDATA[<h2 id="Introduce">Introduce</h2>
<p>Usually when we use <code>GNU/Linux</code> we visit some external websites, and in many cases the relevant content is downloaded through a shell, such as <code>git</code>,<code>wget</code>,etc.</p>
<p>At this point we need to speed up access by setting up a proxy .<a href="https://github.com/rofl0r/proxychains-ng">proxychains-ng</a> is very simple and convenient.</p>
<p>Although we can enable the current shell agent via export <code>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</code>,but he is not permanent solution.</p>
<h2 id="Download-compile-and-install">Download compile and install</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> download</span></span><br><span class="line">git clone https://github.com/rofl0r/proxychains-ng</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> enter folder</span></span><br><span class="line">cd proxychains-ng</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> complie</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr --sysconfdir=/etc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make install-config (安装proxychains.conf配置文件)</span></span><br></pre></td></tr></table></figure>
<h2 id="configration">configration</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">View profile location</span></span><br><span class="line">proxychains4 printenv` </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">edit profile</span></span><br><span class="line">[ProxyList] </span><br><span class="line">socks5  127.0.0.1 7890</span><br><span class="line">http    127.0.0.1 7890</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> modify <span class="built_in">alias</span>(zsh)</span></span><br><span class="line">vi .zshrc</span><br><span class="line">alias pc=&quot;proxychains4&quot;</span><br><span class="line">source .zshrc </span><br></pre></td></tr></table></figure>
<p>Congratulations,you now have fast access through a proxy</p>
<p>Thanks</p>
<blockquote>
<p><a href="https://www.hi-linux.com/posts/48321.html#vip-container">https://www.hi-linux.com/posts/48321.html#vip-container</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>shell</tag>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 死锁问题排查</title>
    <url>//sql-lock/</url>
    <content><![CDATA[<p>参考：<br>
<a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-lock-transact-sql?view=sql-server-ver15">微软官方api</a></p>
<h2 id="问题日志描述">问题日志描述</h2>
<blockquote>
<p>事务(进程 ID 140)与另一个进程被死锁在 锁 | 通信缓冲区 资源上，并且已被选作死锁牺牲品。请重新运行该事务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:196)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1454)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:388)        </span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:338)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.ex</span><br></pre></td></tr></table></figure>
<h2 id="问题排查">问题排查</h2>
<h3 id="1、查询哪些进程导致的死锁">1、查询哪些进程导致的死锁</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> request_session_id spid, object_name( resource_associated_entity_id )</span><br><span class="line">tablename <span class="keyword">from</span> sys.dm_tran_locks <span class="keyword">where</span> resource_type <span class="operator">=</span> <span class="string">&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、查询死锁的原因">2、查询死锁的原因</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">Table</span> #Who(spid <span class="type">int</span>,</span><br><span class="line">    ecid <span class="type">int</span>,</span><br><span class="line">    status nvarchar(<span class="number">50</span>),</span><br><span class="line">    loginname nvarchar(<span class="number">50</span>),</span><br><span class="line">    hostname nvarchar(<span class="number">50</span>),</span><br><span class="line">    blk <span class="type">int</span>,</span><br><span class="line">    dbname nvarchar(<span class="number">50</span>),</span><br><span class="line">    cmd nvarchar(<span class="number">50</span>),</span><br><span class="line">    request_ID <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">Table</span> #Lock(spid <span class="type">int</span>,</span><br><span class="line">    dpid <span class="type">int</span>,</span><br><span class="line">    objid <span class="type">int</span>,</span><br><span class="line">    indld <span class="type">int</span>,</span><br><span class="line">    [Type]  nvarchar(<span class="number">20</span>),</span><br><span class="line">    Resource nvarchar(<span class="number">50</span>),</span><br><span class="line">    Mode nvarchar(<span class="number">10</span>),</span><br><span class="line">    Status nvarchar(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #Who    <span class="keyword">EXEC</span> sp_who active  </span><br><span class="line"><span class="comment">--看哪个引起的阻塞，blk \</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> #Lock     <span class="keyword">EXEC</span> sp_lock  </span><br><span class="line"><span class="comment">--看锁住了那个资源id，objid </span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@DBName</span> nvarchar(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@DBName</span><span class="operator">=</span><span class="string">&#x27;czggzy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> #Who.<span class="operator">*</span> <span class="keyword">FROM</span> #Who <span class="keyword">WHERE</span> dbname<span class="operator">=</span><span class="variable">@DBName</span></span><br><span class="line"><span class="keyword">SELECT</span> #Lock.<span class="operator">*</span> <span class="keyword">FROM</span> #Lock</span><br><span class="line">    <span class="keyword">JOIN</span> #Who</span><br><span class="line">        <span class="keyword">ON</span> #Who.spid<span class="operator">=</span>#Lock.spid</span><br><span class="line">            <span class="keyword">AND</span> dbname<span class="operator">=</span><span class="variable">@DBName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--最后发送到SQL Server的语句</span></span><br><span class="line"><span class="keyword">DECLARE</span> crsr <span class="keyword">Cursor</span> <span class="keyword">FOR</span>     <span class="keyword">SELECT</span> blk <span class="keyword">FROM</span> #Who <span class="keyword">WHERE</span> dbname <span class="operator">=</span> <span class="variable">@DBName</span> <span class="keyword">AND</span> blk <span class="operator">&lt;&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@blk</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">open</span> crsr;</span><br><span class="line"><span class="keyword">FETCH</span> NEXT <span class="keyword">FROM</span> crsr <span class="keyword">INTO</span> <span class="variable">@blk</span>;</span><br><span class="line">WHILE (@<span class="variable">@FETCH</span>_STATUS  <span class="operator">=</span>  <span class="number">0</span>)<span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line">    dbcc inputbuffer(<span class="variable">@blk</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">FETCH</span> NEXT <span class="keyword">FROM</span> crsr <span class="keyword">INTO</span> <span class="variable">@blk</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">close</span> crsr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DEALLOCATE</span> crsr;</span><br><span class="line"><span class="comment">--锁定的资源</span></span><br><span class="line"> <span class="keyword">SELECT</span> #Who.spid,</span><br><span class="line">hostname,</span><br><span class="line">objid,</span><br><span class="line">[type],</span><br><span class="line">mode,</span><br><span class="line">object_name(objid) <span class="keyword">as</span> objName <span class="keyword">FROM</span> #Lock    <span class="keyword">JOIN</span> #Who        <span class="keyword">ON</span> #Who.spid <span class="operator">=</span>#Lock.spid             <span class="keyword">AND</span> dbname <span class="operator">=</span> <span class="variable">@DBName</span>    <span class="keyword">WHERE</span> objid <span class="operator">&lt;&gt;</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">Table</span> #Who;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">Table</span> #Lock;</span><br></pre></td></tr></table></figure>
<h2 id="问题处理">问题处理</h2>
<h3 id="杀死进程">杀死进程</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill spid  --杀死进程</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Use Samba to share files in Linux and Windows</title>
    <url>//samba-share/</url>
    <content><![CDATA[<h2 id="1、Introduction">1、Introduction</h2>
<p>Samba is a free software for linking the UNIX series of operating systems with the Microsoft Windows operating system’s <strong>SMB / CIFS</strong> (Server Message Block / Common Internet File System) network protocol. The third edition not only visits and shares SMB folders and printers, which can also be integrated into Windows Server domains, playing a domain control station (Domain Controller) and joining Active Directory members. In short, this software is a bridge between Windows and UNIX series operating systems, so that the resources are interoperable.</p>
<h2 id="2、Install-Samba-Server-on-Linux（Ubuntu）">2、Install Samba Server on Linux（Ubuntu）</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt -y update</span><br><span class="line">sudo apt -y install samba</span><br></pre></td></tr></table></figure>
<h2 id="3、-Configure-Samba-server-Share-on-Ubuntu">3、 Configure Samba server Share on Ubuntu</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /home/share</span><br><span class="line"># Access to All without Authentication</span><br><span class="line">sudo chmod 777 /home/share</span><br></pre></td></tr></table></figure>
<p>Samba uses configuration file in <code>/etc/samba/smb.conf</code>. If you change this configuration file, the changes do not take effect until you restart the Samba daemon</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line"></span><br><span class="line"># Configure correct UTP</span><br><span class="line">  unix charset = UTF-8</span><br><span class="line"># Change this to the workgroup/NT-domain name your Samba server will be part of</span><br><span class="line">   workgroup = WORKGROUP</span><br><span class="line">   bind interfaces only = yes</span><br><span class="line"></span><br><span class="line"># Set share configuration at the end</span><br><span class="line">[Docs]</span><br><span class="line">   path = /home/share</span><br><span class="line">   writable = yes</span><br><span class="line">   guest ok = yes</span><br><span class="line">   guest only = yes</span><br><span class="line">   create mode = 0777</span><br><span class="line">   directory mode = 0777</span><br></pre></td></tr></table></figure>
<h2 id="4、Test-and-Config-Samba-Clinet">4、Test and Config Samba Clinet</h2>
<p>To access a Samba share on the Linux system ,you need to install and configure Samba client .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt -y install smbclient cifs-utils</span><br><span class="line"># test </span><br><span class="line">smbclient //sambaserver/share -U sambausername</span><br></pre></td></tr></table></figure>
<h2 id="5、-Use-Windows-link-Samba-shared-folders">5、 Use Windows link Samba shared folders</h2>
<p>Open up File Explorer and then right-click on <code>This PC</code> (in the left pane). From the resulting context menu, select Add a network location (Figure A)</p>
<p><img data-src="https://1123213.aiur.site/samba4window.png" alt=""></p>
<h2 id="Refer-to">Refer to</h2>
<blockquote>
<p><a href="https://computingforgeeks.com/install-and-configure-samba-server-share-on-ubuntu/">install-and-configure-samba-server-share-on-ubuntu</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.techrepublic.com/article/how-to-connect-to-linux-samba-shares-from-windows-10/">How to connect to Linux Samba shares from Windows 10</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.redhat.com/sysadmin/samba-windows-linux">Mounting and mapping shares between Windows and Linux with Samba</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>deploy</tag>
        <tag>Samba</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu MATE Install</title>
    <url>//ubuntu-install/</url>
    <content><![CDATA[<h1>Ubuntu MATE安装及初始配置</h1>
<h2 id="前言">前言</h2>
<p>家里有个老电脑、还是在我上初中的时候买的，到现在他的使用率也很低了。考虑配置为amd双核、4G内存、250G硬盘，拿来搭一个小型的Linux服务器，用来学习和跑一些常用的软件还是很不错的。以下是操作详情。</p>
<h2 id="系统下载及安装">系统下载及安装</h2>
<blockquote>
<p>Ubuntu MATE is an impressive lightweight Linux distro that runs fast enough on older computers. It features the MATE desktop – so the user interface might seem a little different at first but it’s easy to use as well.</p>
</blockquote>
<p>此次使用的是<strong>Ubuntu MATE</strong>,如果你需要使用其他系统，以下操作方式类似</p>
<h3 id="1-下载iso镜像文件">1. 下载iso镜像文件</h3>
<p><a href="https://ubuntu-mate.org/download/amd64/">官方地址</a></p>
<h3 id="2-刻录镜像文件到u盘">2. 刻录镜像文件到u盘</h3>
<p>使用<a href="https://rufus.ie/en/">rufus</a>刻录工具进行镜像刻录，使用默认配置。</p>
<h3 id="3-系统安装">3. 系统安装</h3>
<p>开机按<code>F12</code>选择u盘进行默认安装，<strong>图形化安装</strong>基本使用默认配置安装就可以。<br>
界面大概是这样<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/129741D0E59A44EB9969ADFDDB1A010F?method=download&amp;shareKey=c36fcbdab60d0ee03411abcd6efe0778" alt=""></p>
<h2 id="软件安装">软件安装</h2>
<p>系统安装完之后需要一些必要的软件安装及配置</p>
<h3 id="1、SSH服务端">1、SSH服务端</h3>
<p>初始系统中是没有ssh软件的，我们也就无法通过ssh远程访问，需要安装ssh。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装ssh</span><br><span class="line">sudo apt install ssh</span><br><span class="line"># 启用ssh服务</span><br><span class="line">sudo service ssh enable</span><br></pre></td></tr></table></figure>
<h3 id="2、zeroTier安装（可选）">2、zeroTier安装（可选）</h3>
<p>因为家里是内网，如果不在家连接到电脑，需要安装<a href="https://www.zerotier.com/download/">ZeroTIer</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载curl工具</span><br><span class="line">sudo apt install curl</span><br><span class="line"># 下载zerotier</span><br><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br><span class="line"># 查看相关信息</span><br><span class="line">zerotier-cli info</span><br><span class="line"># 加入局域网，xxx为zero中心的16位网络标识码</span><br><span class="line">sudo zerotier-cli join xxx</span><br><span class="line"># 卸载</span><br><span class="line">yum erase zerotier-one</span><br></pre></td></tr></table></figure>
<h3 id="3、speedtest（可选）">3、speedtest（可选）</h3>
<p>下载完第一件事当然是测个速了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s https://install.speedtest.net/app/cli/install.deb.sh | sudo bash</span><br><span class="line"># 安装</span><br><span class="line">sudo apt-get install speedtest</span><br><span class="line"># 使用</span><br><span class="line">speedtest</span><br></pre></td></tr></table></figure>
<p>测完我们发现网速一般情况下没跑到宽带网速上限，以下需要设置一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 安装ethtool工具</span><br><span class="line">sudo apt install ethtool</span><br><span class="line">## 设置网速</span><br><span class="line">sudo ethtool -s enp2s5 speed 100 duplex full autoneg on</span><br></pre></td></tr></table></figure>
<p>设置开机自启动(Ubuntu)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 创建文件</span><br><span class="line">/etc/systemd/system/foo.service</span><br><span class="line">## 添加脚本</span><br><span class="line">[Unit]</span><br><span class="line">Description=Job that runs your user script</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/some/command</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">## 执行脚本</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable foo.service</span><br></pre></td></tr></table></figure>
<h3 id="4、docker-安装">4、docker 安装</h3>
<p>docker作为容器，部署使用常用应用非常方便，安装一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加软件源密钥</span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"># 添加docker软件源</span><br><span class="line">echo  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="line">  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"># 更新缓存</span><br><span class="line">sudo apt-get update</span><br><span class="line"># 安装docker</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5、安装clash-for-linux">5、安装clash for linux</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -P /home/gxhao/Downloads https://github.com/Dreamacro/clash/releases/download/v1.9.0/clash-linux-amd64-v1.9.0.gz</span><br></pre></td></tr></table></figure>
<h3 id="6、关闭系统休眠">6、关闭系统休眠</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看休眠状态</span><br><span class="line">systemctl status sleep.target</span><br><span class="line"># 执行关闭休眠功能</span><br><span class="line">sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target</span><br></pre></td></tr></table></figure>
<h2 id="引用">引用</h2>
<p>Ubuntu MATE介绍</p>
<blockquote>
<p><a href="https://itsfoss.com/ubuntu-mate-20-04-review/">https://itsfoss.com/ubuntu-mate-20-04-review/</a></p>
</blockquote>
<p>网速为10mb/s设置</p>
<blockquote>
<p><a href="https://phoenixnap.com/kb/ethtool-command-change-speed-duplex-ethernet-card-linux">https://phoenixnap.com/kb/ethtool-command-change-speed-duplex-ethernet-card-linux</a></p>
</blockquote>
<p>网速设置为自启动</p>
<blockquote>
<p><a href="https://portal.whitesandshosting.com/index.php/knowledgebase/6/Linux---change-the-speed-and-duplex-settings-of-an-Ethernet-card.html">https://portal.whitesandshosting.com/index.php/knowledgebase/6/Linux---change-the-speed-and-duplex-settings-of-an-Ethernet-card.html</a></p>
</blockquote>
<p>如何设置命令行开机自启动</p>
<blockquote>
<p><a href="https://askubuntu.com/questions/814/how-to-run-scripts-on-start-up">https://askubuntu.com/questions/814/how-to-run-scripts-on-start-up</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab,DevOps CI/CD全自动部署实战</title>
    <url>//gitlab-cicd/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<p>由于项目上需要，上周申请了公司的服务器作为演示临时使用。我使用常规方式，将部署包上传到服务器，编写dockerfile文件，然后使用docker容器部署。做完这一套大概要半个小时，并且我还得全程监控服务器的状态，命令一个一个手敲，之后的更新还有重复上面的步骤，这对我这种懒人来说实在是太麻烦了。突然想到公司在大力推进集成开发平台CI/CD持续集成、持续部署，那我是不是也可以用这种方式快速部署开发，提升工作效率。</p>
<!-- ## 引言
受顾佳文[新点易维背后的故事（一）：“终端妙囊，百宝锦囊”的从 0 到 1](https://oa.epoint.com.cn/EpointCommunity/EpointCommunity/Dis/ShowTopic.aspx?TopicID=29303)这篇帖子的启发，再加上公司目前已经部署了gitlab代码托管服务器，利用周末的时间研究了下gitlab的ci/cd流程。内心os：那我是不是可以通过gitlab来实现**全自动**构建部署? -->
<h2 id="实战">实战</h2>
<p>1、先写一个最简单的web服务，可以参考这个</p>
<blockquote>
<p><a href="http://192.168.0.200/mtjt/java-servlet-hello/-/tree/master">http://192.168.0.200/mtjt/java-servlet-hello/-/tree/master</a></p>
</blockquote>
<p>2、部署gitlab Runer</p>
<h3 id="安装Runner执行器">安装Runner执行器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载执行器</span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span><br><span class="line"># 赋予文件夹权限</span><br><span class="line">chmod +x /usr/local/bin/gitlab-runner</span><br><span class="line"># 新建操作用户</span><br><span class="line">useradd --comment &#x27;gitlab-runner&#x27; --create-home gitlab-runner --shell /bin/bash</span><br><span class="line"># 添加 docker 用户组</span><br><span class="line">usermod -a -G docker gitlab-runner</span><br><span class="line"># gitlab-runner 作为管理员执行</span><br><span class="line">sudo visudo -f /etc/sudoers.d/gitlab-runner</span><br><span class="line">gitlab-runner ALL=(ALL) NOPASSWD: ALL</span><br><span class="line"># 安装</span><br><span class="line">gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line"># 启动</span><br><span class="line">gitlab-runner start</span><br><span class="line"># 验证</span><br><span class="line">gitlab-runner verify </span><br></pre></td></tr></table></figure>
<h3 id="注册Runner执行器">注册Runner执行器</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-runner register </span><br><span class="line"></span><br><span class="line">选择shell </span><br><span class="line">It supposes you have configured a shell Runner and have installed Docker.</span><br></pre></td></tr></table></figure>
<h3 id="效果">效果</h3>
<ul>
<li>整体效果<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/A732675291764B7FA6EF496DDAFB8DE4?method=download&amp;shareKey=cf18868bf11347e64d0e8410f748c777" alt="gitlab-ci1"></li>
<li>局部管道<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/DD0B7E1588E047C7BE4250FB5157F611?method=download&amp;shareKey=1ba1ed9773f99d68801fc49d1695fbda" alt="gitlab-ci2"></li>
<li>实际结果<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/DAE56F52D63D4EA19E7579EC5F948F35?method=download&amp;shareKey=eed42c83b5ce17eb9d2d644d2abc5787" alt="gitlab-cd1"></li>
</ul>
<h2 id="他有什么作用？">他有什么作用？</h2>
<h3 id="提高开发人员效率">提高开发人员效率</h3>
<p>当开发人员将代码合并到gitlab-ci.yaml文件所在的分支，会<strong>自动触发</strong>持续集成、持续部署流程、不必将代码手动上传至服务器，然后一步步等待服务器执行。开发人员能够专注与系统设计和开发，加快客户响应速度。如果管道构建失败，会通过oa发送邮件提醒，类似这样：<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/8703BFE3C0B441AA958F0EAA18B1B0BE?method=download&amp;shareKey=f041327e21086d384d276d0691b6865d" alt="gitlab-cd2"></p>
<h3 id="整改能够及时更新">整改能够及时更新</h3>
<p>目前整改基本上是一个月一次，但是实际情况是开发负责人并不能在发布整改后立即更新，尤其是当开发负责人负责8、9个项目的时候、整改对于开发负责人造成了额外的负担。如果可能的话，可以添加一系列安全验证，开放maven仓库，gitlab通过运行maven命令实现从公司仓库拉取最近的发布包，及时完成整改。<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/91107AE83B4E4437B776CE40B7AB0A7A?method=download&amp;shareKey=22783e09eee20e8e886d3781b370f108" alt="gitlabcd3"></p>
<h3 id="满足条线在更新服务器之前先进行单元测试的要求">满足条线在更新服务器之前先进行单元测试的要求</h3>
<p>通过在gitlab-ci.yaml 中引入test管道，可以实现在更新服务器之前，先通过test管道访问云测平台接口，自行编写测试用例等方式保证更新到服务器的代码是通过完整测试的代码。<br>
<img data-src="https://note.youdao.com/yws/api/personal/file/A1861E8959B5402E94BD265C16EE382B?method=download&amp;shareKey=6a4d7ea7a1abb507a4362423fce79f9d" alt="gitlab-test"></p>
<h3 id="一键部署到生产、仿真系统">一键部署到生产、仿真系统</h3>
<p>在测试系统验证完成后，配置手动触发部署正式服务器管道，可以一键完成正式服务器部署，避免二次打包。</p>
<h2 id="下一个目标规划">下一个目标规划</h2>
<ul>
<li>部署harbor镜像仓库，允许版本回退</li>
<li>docker-compose，多容器部署。</li>
<li>利用ssh部署到远程服务器</li>
</ul>
<blockquote>
<p><a href="https://docs.gitlab.com/ee/ci/ssh_keys/">https://docs.gitlab.com/ee/ci/ssh_keys/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Gitlab</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Svn Hooks触发自动部署流水线</title>
    <url>//svn-cicd/</url>
    <content><![CDATA[<h2 id="缘起">缘起</h2>
<p>项目上使用<a href="https://dev.epoint.com.cn/clouddev-web/frame/fui/pages/themes/clouddev/clouddev">集成开发平台</a>构建部署已经有一段时间了，因为项目上使用的是svn，所以在更新系统的时候仍然需要<strong>提交代码</strong>-&gt;<strong>集成开发平台更新</strong>-&gt;<strong>服务器远程构建更新</strong>。由于提交代码和集成开发平台构建更新都是在公司内网进行的，那么我们可不可以将前两步合并为一步？也就是提交完代码<strong>自动</strong>进行集成开发平台更新，接着只需要在服务器端远程构建更新就可以了。</p>
<h2 id="思路">思路</h2>
<ol>
<li>gitlab 有个配置项<a href="http://xxx/mtjt/custom/-/hooks">Webhooks</a>可以触发集成开发平台构建。</li>
</ol>
<blockquote>
<p>Webhooks enable you to send notifications to web applications in response to events in a group or project.</p>
</blockquote>
<ol start="2">
<li>svn应该有相关触发事件</li>
<li>编写个后台Restful接口，svn触发这个接口，这个接口触发集成开发平台更新</li>
</ol>
<h2 id="调研与设计">调研与设计</h2>
<h3 id="svn监听如何实现？">svn监听如何实现？</h3>
<h4 id="1-svn本身仓库自带了hooks功能">1. svn本身仓库自带了hooks功能</h4>
<p>在svn仓库的hooks文件夹也自带了相关的模板。配置相关shell命令即可使用<br>
<img data-src="https://gxhao.aiur.site/svnhook1.png" alt=""><br>
<em>没有访问项目svn仓库的权限，此实现方法不考虑。</em>(否决)</p>
<h4 id="2-svn-开发人员开发了基于apache开源的svn提交监听工具-CommitMonitor">2. svn 开发人员开发了基于apache开源的svn提交监听工具-<a href="https://tools.stefankueng.com/CommitMonitor.html">CommitMonitor</a></h4>
<p><em>这个工具可以监听svn提交操作，然后发送通知在桌面右下角。但是于我而言，我不需要他在右下角提醒我，我需要他提供一个通知的api，我可以利用这个api去做一些别的事情。很遗憾没有找到</em>（否决）</p>
<h4 id="3-TortoiseSVN-提供的Hooks-Script脚本">3. TortoiseSVN 提供的<a href="https://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-settings.html#tsvn-dug-settings-hooks">Hooks Script</a>脚本</h4>
<p>查看官方介绍，貌似此方法是一种比较可行的方法，且貌似官方文档上没有限定必须是什么类型的脚本。</p>
<h3 id="脚本如何选择？">脚本如何选择？</h3>
<h4 id="1-shell-脚本">1.shell 脚本</h4>
<p>直接编写shell执行访问Rest接口或者相关jar包，但是这样在执行后会有一堆提交报错（实际是执行成功的），类似这样：<br>
<img data-src="https://gxhao.aiur.site/svnhook2.png" alt=""><br>
这可能导致体验不太好，<s>明明我提交了完了，你却说我提交错了</s></p>
<h4 id="2-JavaScript">2.JavaScript</h4>
<p>js可以编写http请求的代码，然后利用<code>node</code>去执行脚本。考虑环境兼容性，大部分人电脑应该没有安装node相关工具包。</p>
<h4 id="3-Wscript">3.<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wscript">Wscript</a></h4>
<p>这是微软在<code>Windows98</code>上就推出的Windows系统自带的脚本，可以理解为<code>Windows js</code>,这样环境就不用担心了，开始编写<code>Wscript</code>脚本代码。</p>
<h2 id="开发与测试">开发与测试</h2>
<h3 id="编写代码">编写代码</h3>
<p>Wscript有个很方便的对象（<code>WinHttp.WinHttpRequest.5.1</code>），可以直接访问http请求。<br>
编写Wscript代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = WScript.CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;); </span><br><span class="line">http.Open(&quot;POST&quot;, &quot;http://xxx/start&quot;, false);</span><br><span class="line">http.SetRequestHeader(&quot;Accept&quot;, &quot;*/*&quot;);</span><br><span class="line">http.SetRequestHeader(&quot;Accept-Language&quot;, &quot;zh-cn,zh&quot;);</span><br><span class="line">http.SetRequestHeader(&quot;User-Agent&quot;, &quot;Mozilla/6.0&quot;);</span><br><span class="line">http.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class="line">// http.SetRequestHeader(&quot;Referer&quot;, &quot;http://www.baidu.com/&quot;);</span><br><span class="line">// http.SetRequestHeader(&quot;Connection&quot;, &quot;Close &quot;);</span><br><span class="line">// http.SetRequestHeader(&quot;Content-Length&quot;, &quot;100&quot;);</span><br><span class="line">JSONString = &quot;&#123;\&quot;pipelineGuid\&quot; : \&quot;xxxxx\&quot;, \&quot;loginId\&quot;: \&quot;gxhao\&quot;&#125;&quot;;</span><br><span class="line">http.Send(JSONString);</span><br><span class="line">http.WaitForResponse(1000);</span><br><span class="line">WScript.Echo(http.ResponseText);</span><br></pre></td></tr></table></figure>
<h3 id="配置TortoiseSvn">配置TortoiseSvn</h3>
<p><img data-src="https://gxhao.aiur.site/svnhook.png" alt=""></p>
<p><code>Hook Type</code>选择Post-Commit-Hook，即在提交完成时触发。<code>Working Copy Path</code> 选择你要提交的代码目录（可配置多个）。<code>Command Line To Execute</code>选择你要执行的Wscript脚本(注意双引号)。</p>
<h3 id="测试提交">测试提交</h3>
<p>结果大概时这样：</p>
<p><img data-src="https://gxhao.aiur.site/svnhook3.png" alt=""></p>
<h2 id="目前存在的一些问题">目前存在的一些问题</h2>
<ol>
<li>只能在TortoiseSvn的工具中提交才能触发，ide提交不会触发。</li>
<li>集成平台构建完成后没有相关通知到msg/邮件。</li>
</ol>
<h2 id="结语">结语</h2>
<p>引用：</p>
<blockquote>
<p><a href="https://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-settings.html#tsvn-dug-settings-hooks">https://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-settings.html#tsvn-dug-settings-hooks</a></p>
</blockquote>
<blockquote>
<p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wscript">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wscript</a></p>
</blockquote>
<p>感谢：</p>
<p><strong>非常感谢中研院庄晟琪，顾疆飞两位大佬的帮助和支持</strong>，希望此脚本能够对大家在开发时有所帮助，提高开发效率，减少更新构建时间。</p>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Gitlab</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年终总结</title>
    <url>//2021Summary/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>从2020年毕业到现在参加工作也一年多了，回顾这一年的经历，有一些想法想记录和总结一下，等以后回头再看的时候也算是对自己有个交代。其实之前的时候都没有写过类似年终总结的，只是受到公司年终总结和it行业人员的一些启发，来回顾一下2021年自己的成长和对2022年的一些展望。</p>
<h2 id="工作">工作</h2>
<h3 id="刚进入工作时期">刚进入工作时期</h3>
<p>我所在的学校是华中地区的一所二本院校，学校内并没有很强的IT技术氛围。我毕业的时候一度以为自己毕业就失业，不过幸运的是我能够在2020年9月入职到<strong>国泰新点</strong>作为我程序员生涯的起点，回想自己刚入职的那段时间，整天提心吊胆，害怕领导会因为我技术太菜把我辞退（不过现在已经没有这种想法了）。当时的想法就是能够熬过六个月试用期，这样公司就不会随意辞退我了。</p>
<h3 id="工作一段时间之后的折磨痛苦">工作一段时间之后的折磨痛苦</h3>
<p>在同事y及领导的帮助下，工作到还顺利，任务也不会很多，2020年的时间就这样一天天的度过了。我认为我真正成为一名程序员，真正作为IT世界的初探者还是在今年同事y离职及我正式转正后，同事y离职后他原来的项目就转交到了我和我领导上、去年刚接手的维护项目也转到了我头上、去年的开发项目今年也开始开发。随着这一系列的变动，我的压力倍增。新接手的维护项目作为领导给我的试水项目，让我全权复制，但是这个项目虽然是维护期，但是还是有一堆奇奇怪怪的BUG，经常排查一个BUG修复需要三四天，但是这三四天之中领导又会安排其他的任务。导致我在2021年四五月份经常处于早上8点30上班，处理一会自己项目问题，处理一下领导项目问题，写一下其他项目需求，然后就到了晚上11、12点，接着第二天继续这样。一度有离职的念头，但是想到才刚转正不久，这时候离职可能外面的公司不太认同工作经验，再加上疫情原因。还是坚持了下来。</p>
<h3 id="自我排解及释压">自我排解及释压</h3>
<p>大概在5月份的时候，公司组织了一次旅游（我一向讨厌旅游，觉得山水小时候天庭见，并没有很新奇，而且还要应付领导和同事，这让我感觉很麻烦），这次旅游虽然仅仅两天时间，但使我从之前的状态调整过来，领悟到在<strong>工作中人并不需要给自己太大的压力</strong>，这让自己的神经会整体处于非常紧张的状态。应该放松心情，公司并不会因为你个人的工作而改变什么，<strong>工作是永远做不完的</strong>。接下来的工作还算是张弛有度，算是比较轻松的度过了7、8、9、10、11月，完成一些新老系统对接和数据交换工作。12月份真正作为的一个项目的开发负责人。作为主要开发，完成系统功能部署编写。</p>
<h2 id="学习">学习</h2>
<p><strong>我不可能一辈子从事程序员工作，但是程序始终是我喜欢的东西之一。</strong></p>
<h3 id="刚开始学习的迷茫">刚开始学习的迷茫</h3>
<p>大学期间荒废了四年最好的时光。导致我并没有自主学习的能力。在今年上半年想学习Spring和微服务一些知识，只能通过视频的方式来学习。但是视频一个是非常浪费时间，还有就是前面学，过一段时间就忘了，而且内容都非常基础（看文档十分钟，看视频两个小时）。我感觉到非常折磨，同时每天看视频到夜里2点，第二天上班经常迟到。这对我造成了非常大的困扰。</p>
<h3 id="学习的转机">学习的转机</h3>
<p>通过偶然的机会认识到在微软工作的一个程序员<a href="https://anduin.aiursoft.com/?p=1">Anduin</a>，他的确算是我程序生涯引路人之一。从他的博客及视频中我学到了很多不一样的程序知识，例如DevOps、现代软件工程、JWT的前身与发展、消息发送及接收等等，也学习了一些在开源时间做贡献的方法和完整的软件开发流程。最重要的是我学习到了全新的搜索方式–<strong>使用英语搜索</strong>，我通过这种搜索方式，排查一些服务器问题和日常开发查找资料的效率得到了极大的提升。</p>
<h3 id="学习的方法">学习的方法</h3>
<p>通过一段时间的探索，我现在已经掌握了基本学习的一些方法。如果你想学一门新技术，可以稍微看一些浅显易懂的入门视频，但是不要继续看视频了，主要通过项目和书籍进行学习。例如我想学习docker，那么我只需要看视频大概了解下容器的相关概念和docker的发展就足够了，接下来就需要找一个比较熟悉的项目，配合相关文档，一步步的根据文档来部署该项目，通过各种方式进阶部署优化，理解每一个步骤的意义。如果这样进行学习的话，不仅成就感满满，而且非常容易记忆。</p>
<h3 id="目前学习内容的总结">目前学习内容的总结</h3>
<p>总而言之，这一年我主要学习了docker的使用，springboot的自动装配和简化配置原理，spring简化版的源码，shell的基本使用，服务器相关知识，网络的相关知识及搭建内网网路中心。给家里的电脑安装Ubuntu，远程部署一些小应用。DevOps的概念，部署gitlab runner，通过ci/cd快速完成开发交付。GitHub的使用。</p>
<h2 id="生活">生活</h2>
<h3 id="消费">消费</h3>
<p>我是一个不怎么注重生活品质的人，但是今年依旧买了不少东西，包含27寸2k显示器、任天堂switch、华硕无畏pro14笔记本。显示器刚开始是想在家方便写代码玩游戏用的，刚开始还觉得挺大的，后来一段时间还作为switch的显示器用，不过最近一段时间由于玩游戏的频率减少、switch基本吃灰，公司21寸显示器实在辣眼睛，这个显示器搬到了公司里作为日常用显示器。switch是去年在一个朋友家玩的时候体验到的。今年也想体验下主机游戏，于是在四月份就买了switch，并且购买了健身环，借了塞尔达旷野之息。但是很快到八月份左右我就不怎么玩了，下班后只想躺着床上，目前switch也是处于吃灰状态。笔记本是11月份才买的，公司规定一些软件是禁止安装的，所以经常会检测到电脑异常。所以我觉得我可能需要一台个人用的笔记本，但是这个买完就后悔了，平常使用他基本用来看视频。在公司摸鱼学一些东西的时候也不可能再打开这台笔记本学习。所以目前还没用到这个笔记本的地方。</p>
<h3 id="游玩">游玩</h3>
<p>今年在中秋节前后找过一次高中好友小聚了一次，之后一般都是一个人生活，也习惯了一个人生活。后面去了一次苏州微软，去了一次在微软小冰大佬的新家。游戏塞尔达玩了一段时间，lol玩了一段时间。</p>
<h3 id="交友">交友</h3>
<p>主要是跟拍照的团队一起玩了两三次，认识了anduin，并且在苏州微软面基。相亲会参加了两次，但均无收获，第一次提前走了，第二次遇到一个老乡，但是因为性格差异，也没聊几天就结束了。</p>
<h2 id="总结">总结</h2>
<p>回顾这一年，感觉自己还是学习了不少知识，也清晰的知道自己的差距在哪里，虽然不说碌碌无为，但是感觉这一年学习到的东西还是太少了。希望自己新一年能在编程世界有所收获。</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>想法</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS filesystem mount</title>
    <url>//nfsmount/</url>
    <content><![CDATA[<h1>使用nfs文件系统挂载</h1>
<ol>
<li>服务器端挂载配置  <a href="https://cloud.tencent.com/developer/article/1626660">https://cloud.tencent.com/developer/article/1626660</a></li>
<li>参考文章    ：<a href="https://superuser.com/questions/1363062/how-to-share-a-directory-on-a-linux-machine-to-a-windows-machine-via-nfs">How to share a directory on a Linux machine to a Windows machine via NFS?</a></li>
</ol>
<h2 id="挂载相关命令">挂载相关命令</h2>
<h3 id="Linux-side">Linux side:</h3>
<ol>
<li>Install the NFS server and utilities (nfs-utils or your distribution’s equivalent).  <code>sudo apt install nfs-kernel-server</code></li>
<li>Create the directory <code>/srv/nfs</code>.<br>
<code>sudo mkdir -p /srv/nfs4/backups</code></li>
<li>Create a new empty directory under /srv/nfs, e.g. files.<br>
Bind-mount the created directory to the directory containing you want to share, e.g.:<br>
<code>sudo mount --bind /home/user/stuff/files /srv/nfs/files</code><br>
Create or edit <code>/etc/exports</code>, and add the line:(the above assumes the Windows machine is on the same LAN as the Linux machine, with the subnet having a 192.168.0.0/16 prefix - adjust as needed).</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/srv/nfs 192.168.0.0/16(rw,all_squash,no_subtree_check,anonuid=65534,anongid=65534)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Start the NFS server<br>
<code>sudo systemctl start nfs-server.service</code></li>
</ol>
<h3 id="Windows-side">Windows side:</h3>
<ol>
<li>In Control Panel, open Programs and Features, there find Add/remove Windows components, and enable Services for NFS and everything under it.</li>
<li>Open a command prompt, and type:<br>
<code>mount -o anon \\192.168.0.1\srv\nfs\files Z:</code><br>
(assuming your Linux machine is at 192.168.0.1).</li>
<li>The directory should now be available on the Z: drive. (Type start Z: at the command prompt to open it in Explorer).</li>
</ol>
<h3 id="FAQ">FAQ</h3>
<h4 id="windows连接挂载显示网络连接失败（错误代码53）">windows连接挂载显示网络连接失败（错误代码53）</h4>
<p>by Ubuntu <a href="https://ubuntuforums.org/showthread.php?t=1402655">https://ubuntuforums.org/showthread.php?t=1402655</a></p>
<blockquote>
<p>NFS server has an option of working in insecure mode (Allowing higher incoming port numbers). Windows NFS client often uses higher port numbers. You can enable this option by adding an option to the share<br>
Example: /share *(insecure,rw)<br>
在服务器端exports文件中添加insecure</p>
</blockquote>
<h4 id="在windows创建文件显示无权访问">在windows创建文件显示无权访问</h4>
<blockquote>
<p><a href="https://graspingtech.com/mount-nfs-share-windows-10/">https://graspingtech.com/mount-nfs-share-windows-10/</a></p>
</blockquote>
<ol>
<li>Open <code>regedit</code> by typing it in the search box end pressing Enter.</li>
<li>Browse to <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default</code>.</li>
<li>Create a new <code>New DWORD (32-bit) Value</code> inside the <code>Default</code> folder named <code>AnonymousUid</code> and assign the <code>UID</code> found on the <code>UNIX</code> directory as shared by the NFS system.</li>
<li>Create a new <code>New DWORD (32-bit&quot;) Value</code> inside the <code>Default</code> folder named <code>AnonymousGid</code> and assign the GID found on the UNIX directory as shared by the NFS system.</li>
<li>Restart the NFS client or reboot the machine to apply the changes.</li>
</ol>
<h4 id="Windows输入mount提示：位于命令管道位置-1-的-cmdlet-New-PSDrive-请为以下参数提供值-Name-E-PSProvider-C">Windows输入mount提示：<code>位于命令管道位置 1 的 cmdlet New-PSDrive 请为以下参数提供值:Name: E PSProvider: C:</code></h4>
<p>reason：缺少“基于UNIX的应用程序子系统”一项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-PSDrive -Name &quot;z&quot; -Root &quot;\\10.147.17.145\srv\nfs&quot; -Persist -PSProvider &quot;FileSystem&quot;</span><br></pre></td></tr></table></figure>
<p>参考stackoverflow</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/57582910/powershell-cant-run-mount">https://stackoverflow.com/questions/57582910/powershell-cant-run-mount</a></p>
</blockquote>
<h4 id="重启nfs服务">重启nfs服务**</h4>
<p><code> sudo /etc/init.d/nfs-kernel-server restart</code></p>
<h4 id="验证是否正常使用">验证是否正常使用**</h4>
<p><code> sudo cat /proc/fs/nfsd/versions</code></p>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>nfs</tag>
        <tag>mount</tag>
      </tags>
  </entry>
  <entry>
    <title>远程连接linux桌面的几种方式</title>
    <url>//remote-linux/</url>
    <content><![CDATA[<h1>前言</h1>
<p>家里有个老电脑想使用起来，最适合的就是linux系统了，安装了Ubuntu。除了远程命令执行外还需要远程窗口帮助家里长辈处理一些问题。问题描述如下:<br>
v2ex类似问题：<a href="https://v2ex.com/t/462243">远程访问 Linux 桌面最快速最高效的方式是什么 VNC,RDP?</a></p>
<h1>使用花生壳做端口映射</h1>
<p>无公网ip的首选方案，但是限制网速1m，网络总流量1gb。有点太少了。一天基本就要用500m。</p>
<h2 id="xrdp">xrdp</h2>
<p>在linux安装xrdp并在花生壳开启3389端口映射。事实体验并不太好。画面卡断。操作不流畅</p>
<h2 id="teamview">teamview</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载teamView</span><br><span class="line">wget https://download.teamviewer.com/download/linux/teamviewer_amd64.deb</span><br><span class="line">安装 teamView</span><br><span class="line">sudo apt install ./teamviewer_amd64.deb</span><br></pre></td></tr></table></figure>
<p>在安装过程中，官方 TeamViewer 软件源已经被添加到你的系统中。你可以使用 cat 命令来验证文件内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/apt/sources.list.d/teamviewer.list</span><br><span class="line"></span><br><span class="line">deb http://linux.teamviewer.com/deb stable main</span><br></pre></td></tr></table></figure>
<p>缺点teamViewer在Linux端经常掉线</p>
<h2 id="VNC远程链接">VNC远程链接</h2>
<p><a href="https://help.realvnc.com/hc/en-us/articles/360002253198-Installing-and-Removing-VNC-Connect#downloading-vnc-server-0-20">官方文档</a></p>
<p>很详细的一个帖子</p>
<blockquote>
<p><a href="https://bytexd.com/how-to-install-configure-vnc-server-on-ubuntu-20-04/">https://bytexd.com/how-to-install-configure-vnc-server-on-ubuntu-20-04/</a></p>
</blockquote>
<p>开启vnc服务</p>
<blockquote>
<p>vncserver -localhost no :1</p>
</blockquote>
<p>关闭vnc服务</p>
<blockquote>
<p>vncserver -kill :1</p>
</blockquote>
<p>编辑桌面配置文件</p>
<blockquote>
<p>sudo apt install ubuntu-budgie-desktop</p>
</blockquote>
<blockquote>
<p>sudo vim ~/.vnc/xstartup</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">xrdb $HOME/.Xresources</span><br><span class="line">exec budgie-desktop &amp;</span><br></pre></td></tr></table></figure>
<hr>
<h1>使用ZeroTier做内部局域网</h1>
<p>官网：<a href="https://announce.zerotier.com/en">ZeroTier</a></p>
<ul>
<li>支持linux、ios、Widows、nas</li>
<li>操作简单</li>
</ul>
<h2 id="Linux端使用">Linux端使用</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看相关信息</span></span><br><span class="line">zerotier-cli info</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入局域网</span></span><br><span class="line">zerotier-cli join 83048a0632fdcd69</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">yum erase zerotier-one</span><br></pre></td></tr></table></figure>
<h2 id="Windows下载">Windows下载</h2>
<blockquote>
<p><a href="https://download.zerotier.com/dist/ZeroTier%20One.msi">https://download.zerotier.com/dist/ZeroTier One.msi</a></p>
</blockquote>
<h1>使用openssh for Windows 作为代理转发内网(未成功)</h1>
<p><a href="https://cloud.tencent.com/developer/article/1420930">如何使用windows远程控制一台服务器</a></p>
<p><a href="https://www.v2ex.com/t/493717">如何通过 SSH 在家里访问公司的内网网站？</a></p>
<hr>
<h1>使用Widows端口转发工具（NATBypass）</h1>
<p><a href="https://github.com/cw1997/NATBypass">NATBypass_github</a></p>
<p>相关教程 ：</p>
<blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1365274">https://cloud.tencent.com/developer/article/1365274</a><br>
<a href="https://apt404.github.io/2016/09/11/htran-portforward/">https://apt404.github.io/2016/09/11/htran-portforward/</a><br>
<a href="https://cloud.tencent.com/developer/article/1365274">https://cloud.tencent.com/developer/article/1365274</a><br>
<a href="https://xz.aliyun.com/t/6349#toc-22">https://xz.aliyun.com/t/6349#toc-22</a></p>
</blockquote>
]]></content>
      <categories>
        <category>deployment</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>remote</tag>
      </tags>
  </entry>
</search>
